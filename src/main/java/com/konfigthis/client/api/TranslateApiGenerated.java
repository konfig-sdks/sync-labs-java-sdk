/*
 * Synchronize API
 * Synchronize API allows you to lipsync a video to any audio in any language.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TranslateDto;
import com.konfigthis.client.model.TranslationJobExtended;
import com.konfigthis.client.model.TranslationJobInitial;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TranslateApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TranslateApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TranslateApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"x-api-key\" is required but no API key was provided. Please set \"x-api-key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getTranslationCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTranslationValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTranslation(Async)");
        }

        return getTranslationCall(id, _callback);

    }


    private ApiResponse<TranslationJobExtended> getTranslationWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getTranslationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TranslationJobExtended>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTranslationAsync(String id, final ApiCallback<TranslationJobExtended> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTranslationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TranslationJobExtended>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTranslationRequestBuilder {
        private final String id;

        private GetTranslationRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getTranslation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Returns video status and URL to download from. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTranslationCall(id, _callback);
        }


        /**
         * Execute getTranslation request
         * @return TranslationJobExtended
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Returns video status and URL to download from. </td><td>  -  </td></tr>
         </table>
         */
        public TranslationJobExtended execute() throws ApiException {
            ApiResponse<TranslationJobExtended> localVarResp = getTranslationWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTranslation request with HTTP info returned
         * @return ApiResponse&lt;TranslationJobExtended&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Returns video status and URL to download from. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TranslationJobExtended> executeWithHttpInfo() throws ApiException {
            return getTranslationWithHttpInfo(id);
        }

        /**
         * Execute getTranslation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Returns video status and URL to download from. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TranslationJobExtended> _callback) throws ApiException {
            return getTranslationAsync(id, _callback);
        }
    }

    /**
     * 
     * Use the video ID from the POST request to check video status. Keep checking until status is &#39;completed&#39; and a download URL is provided.
     * @param id  (required)
     * @return GetTranslationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Returns video status and URL to download from. </td><td>  -  </td></tr>
     </table>
     */
    public GetTranslationRequestBuilder getTranslation(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetTranslationRequestBuilder(id);
    }
    private okhttp3.Call translateCall(TranslateDto translateDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = translateDto;

        // create path and map variables
        String localVarPath = "/translate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translateValidateBeforeCall(TranslateDto translateDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'translateDto' is set
        if (translateDto == null) {
            throw new ApiException("Missing the required parameter 'translateDto' when calling translate(Async)");
        }

        return translateCall(translateDto, _callback);

    }


    private ApiResponse<TranslationJobInitial> translateWithHttpInfo(TranslateDto translateDto) throws ApiException {
        okhttp3.Call localVarCall = translateValidateBeforeCall(translateDto, null);
        Type localVarReturnType = new TypeToken<TranslationJobInitial>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call translateAsync(TranslateDto translateDto, final ApiCallback<TranslationJobInitial> _callback) throws ApiException {

        okhttp3.Call localVarCall = translateValidateBeforeCall(translateDto, _callback);
        Type localVarReturnType = new TypeToken<TranslationJobInitial>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TranslateRequestBuilder {
        private final String videoUrl;
        private final String targetLanguage;
        private Double maxCredits;
        private String webhookUrl;
        private String model;

        private TranslateRequestBuilder(String videoUrl, String targetLanguage) {
            this.videoUrl = videoUrl;
            this.targetLanguage = targetLanguage;
        }

        /**
         * Set maxCredits
         * @param maxCredits Maximum number of credits to use for video generation. If job exceeds this value, the job will be aborted (optional)
         * @return TranslateRequestBuilder
         */
        public TranslateRequestBuilder maxCredits(Double maxCredits) {
            this.maxCredits = maxCredits;
            return this;
        }
        
        /**
         * Set webhookUrl
         * @param webhookUrl A url to send a notification to upon completion of video generation (optional)
         * @return TranslateRequestBuilder
         */
        public TranslateRequestBuilder webhookUrl(String webhookUrl) {
            this.webhookUrl = webhookUrl;
            return this;
        }
        
        /**
         * Set model
         * @param model The model to use for video generation. (optional, default to sync-1.5.0)
         * @return TranslateRequestBuilder
         */
        public TranslateRequestBuilder model(String model) {
            this.model = model;
            return this;
        }
        
        /**
         * Build call for translate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translation job has been successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TranslateDto translateDto = buildBodyParams();
            return translateCall(translateDto, _callback);
        }

        private TranslateDto buildBodyParams() {
            TranslateDto translateDto = new TranslateDto();
            translateDto.videoUrl(this.videoUrl);
            translateDto.targetLanguage(this.targetLanguage);
            translateDto.maxCredits(this.maxCredits);
            translateDto.webhookUrl(this.webhookUrl);
            translateDto.model(this.model);
            return translateDto;
        }

        /**
         * Execute translate request
         * @return TranslationJobInitial
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translation job has been successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public TranslationJobInitial execute() throws ApiException {
            TranslateDto translateDto = buildBodyParams();
            ApiResponse<TranslationJobInitial> localVarResp = translateWithHttpInfo(translateDto);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute translate request with HTTP info returned
         * @return ApiResponse&lt;TranslationJobInitial&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translation job has been successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TranslationJobInitial> executeWithHttpInfo() throws ApiException {
            TranslateDto translateDto = buildBodyParams();
            return translateWithHttpInfo(translateDto);
        }

        /**
         * Execute translate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The translation job has been successfully created. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TranslationJobInitial> _callback) throws ApiException {
            TranslateDto translateDto = buildBodyParams();
            return translateAsync(translateDto, _callback);
        }
    }

    /**
     * 
     * Translates and synchronizes the given video to the specified target language.
     * @param translateDto Required data for translating and synchronizing video. Includes video URL, target language, and optional parameters for model selection, webhook integration, and credit limits. (required)
     * @return TranslateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The translation job has been successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public TranslateRequestBuilder translate(String videoUrl, String targetLanguage) throws IllegalArgumentException {
        if (videoUrl == null) throw new IllegalArgumentException("\"videoUrl\" is required but got null");
            

        if (targetLanguage == null) throw new IllegalArgumentException("\"targetLanguage\" is required but got null");
            

        return new TranslateRequestBuilder(videoUrl, targetLanguage);
    }
    private okhttp3.Call translationCostCall(String videoUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/translate/cost";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (videoUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("videoUrl", videoUrl));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call translationCostValidateBeforeCall(String videoUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'videoUrl' is set
        if (videoUrl == null) {
            throw new ApiException("Missing the required parameter 'videoUrl' when calling translationCost(Async)");
        }

        return translationCostCall(videoUrl, _callback);

    }


    private ApiResponse<Void> translationCostWithHttpInfo(String videoUrl) throws ApiException {
        okhttp3.Call localVarCall = translationCostValidateBeforeCall(videoUrl, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call translationCostAsync(String videoUrl, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = translationCostValidateBeforeCall(videoUrl, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class TranslationCostRequestBuilder {
        private final String videoUrl;

        private TranslationCostRequestBuilder(String videoUrl) {
            this.videoUrl = videoUrl;
        }

        /**
         * Build call for translationCost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return translationCostCall(videoUrl, _callback);
        }


        /**
         * Execute translationCost request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            translationCostWithHttpInfo(videoUrl);
        }

        /**
         * Execute translationCost request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return translationCostWithHttpInfo(videoUrl);
        }

        /**
         * Execute translationCost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return translationCostAsync(videoUrl, _callback);
        }
    }

    /**
     * 
     * 
     * @param videoUrl A url to the video file to be synchronized -- must be publicly accessible (required)
     * @return TranslationCostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public TranslationCostRequestBuilder translationCost(String videoUrl) throws IllegalArgumentException {
        if (videoUrl == null) throw new IllegalArgumentException("\"videoUrl\" is required but got null");
            

        return new TranslationCostRequestBuilder(videoUrl);
    }
}
